// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: clients/cal-management/service.proto

import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_49 } from "twirpscript";

//================================================//
// CalendarEventManagementService Protobuf Client //
//================================================//

/**
 * return the created event if successful
 */
export async function CreateEvent(createEventReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/CreateEvent",
    CreateEventReq.encode(createEventReq),
    config
  );
  return CreateEventRes.decode(response);
}

/**
 * return the updated event if successful
 */
export async function UpdateEvent(updateEventReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/UpdateEvent",
    UpdateEventReq.encode(updateEventReq),
    config
  );
  return UpdateEventRes.decode(response);
}

export async function DeleteEvent(deleteEventReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/DeleteEvent",
    DeleteEventReq.encode(deleteEventReq),
    config
  );
  return DeleteEventRes.decode(response);
}

/**
 * get event
 */
export async function GetEvent(getEventReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/GetEvent",
    GetEventReq.encode(getEventReq),
    config
  );
  return GetEventRes.decode(response);
}

/**
 * get get a user's GCalEvents
 */
export async function GetUsersGcalEvents(getUsersGcalEventsReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/GetUsersGcalEvents",
    GetUsersGcalEventsReq.encode(getUsersGcalEventsReq),
    config
  );
  return GetUsersGcalEventsRes.decode(response);
}

/**
 * get get a teams's  user's GCalEvents
 */
export async function GetTeamssGcalEvents(getTeamsGcalEventsReq, config) {
  const response = await PBrequest(
    "/CalendarEventManagementService/GetTeamssGcalEvents",
    GetTeamsGcalEventsReq.encode(getTeamsGcalEventsReq),
    config
  );
  return GetTeamsGcalEventsRes.decode(response);
}

//============================================//
// CalendarEventManagementService JSON Client //
//============================================//

/**
 * return the created event if successful
 */
export async function CreateEventJSON(createEventReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/CreateEvent",
    createEventReq,
    config
  );
  return response;
}

/**
 * return the updated event if successful
 */
export async function UpdateEventJSON(updateEventReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/UpdateEvent",
    updateEventReq,
    config
  );
  return response;
}

export async function DeleteEventJSON(deleteEventReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/DeleteEvent",
    deleteEventReq,
    config
  );
  return response;
}

/**
 * get event
 */
export async function GetEventJSON(getEventReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/GetEvent",
    getEventReq,
    config
  );
  return response;
}

/**
 * get get a user's GCalEvents
 */
export async function GetUsersGcalEventsJSON(getUsersGcalEventsReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/GetUsersGcalEvents",
    getUsersGcalEventsReq,
    config
  );
  return response;
}

/**
 * get get a teams's  user's GCalEvents
 */
export async function GetTeamssGcalEventsJSON(getTeamsGcalEventsReq, config) {
  const response = await JSONrequest(
    "/CalendarEventManagementService/GetTeamssGcalEvents",
    getTeamsGcalEventsReq,
    config
  );
  return response;
}

export function createCalendarEventManagementService(service) {
  return {
    name: "CalendarEventManagementService",
    methods: {
      CreateEvent: {
        name: "CreateEvent",
        handler: service.CreateEvent,
        input: CreateEventReq,
        output: CreateEventRes,
      },
      UpdateEvent: {
        name: "UpdateEvent",
        handler: service.UpdateEvent,
        input: UpdateEventReq,
        output: UpdateEventRes,
      },
      DeleteEvent: {
        name: "DeleteEvent",
        handler: service.DeleteEvent,
        input: DeleteEventReq,
        output: DeleteEventRes,
      },
      GetEvent: {
        name: "GetEvent",
        handler: service.GetEvent,
        input: GetEventReq,
        output: GetEventRes,
      },
      GetUsersGcalEvents: {
        name: "GetUsersGcalEvents",
        handler: service.GetUsersGcalEvents,
        input: GetUsersGcalEventsReq,
        output: GetUsersGcalEventsRes,
      },
      GetTeamssGcalEvents: {
        name: "GetTeamssGcalEvents",
        handler: service.GetTeamssGcalEvents,
        input: GetTeamsGcalEventsReq,
        output: GetTeamsGcalEventsRes,
      },
    },
  };
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const CalEvent = {
  /**
   * Serializes a CalEvent to protobuf.
   */
  encode: function (msg) {
    return CalEvent._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a CalEvent from protobuf.
   */
  decode: function (bytes) {
    return CalEvent._readMessage(
      CalEvent.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a CalEvent to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(CalEvent._writeMessageJSON(msg));
  },

  /**
   * Deserializes a CalEvent from JSON.
   */
  decodeJSON: function (json) {
    return CalEvent._readMessageJSON(CalEvent.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a CalEvent with all fields set to their default value.
   */
  initialize: function () {
    return {
      summary: "",
      location: "",
      Start: 0n,
      end: 0n,
      recurrence: [],
      attendees: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.summary) {
      writer.writeString(1, msg.summary);
    }
    if (msg.location) {
      writer.writeString(2, msg.location);
    }
    if (msg.Start) {
      writer.writeInt64String(3, msg.Start.toString());
    }
    if (msg.end) {
      writer.writeInt64String(4, msg.end.toString());
    }
    if (msg.recurrence?.length) {
      writer.writeRepeatedString(5, msg.recurrence);
    }
    if (msg.attendees?.length) {
      writer.writeRepeatedString(6, msg.attendees);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.summary) {
      json.summary = msg.summary;
    }
    if (msg.location) {
      json.location = msg.location;
    }
    if (msg.Start) {
      json.Start = msg.Start.toString();
    }
    if (msg.end) {
      json.end = msg.end.toString();
    }
    if (msg.recurrence?.length) {
      json.recurrence = msg.recurrence;
    }
    if (msg.attendees?.length) {
      json.attendees = msg.attendees;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.summary = reader.readString();
          break;
        }
        case 2: {
          msg.location = reader.readString();
          break;
        }
        case 3: {
          msg.Start = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.end = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.recurrence.push(reader.readString());
          break;
        }
        case 6: {
          msg.attendees.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _summary = json.summary;
    if (_summary) {
      msg.summary = _summary;
    }
    const _location = json.location;
    if (_location) {
      msg.location = _location;
    }
    const _Start = json.Start;
    if (_Start) {
      msg.Start = BigInt(_Start);
    }
    const _end = json.end;
    if (_end) {
      msg.end = BigInt(_end);
    }
    const _recurrence = json.recurrence;
    if (_recurrence) {
      msg.recurrence = _recurrence;
    }
    const _attendees = json.attendees;
    if (_attendees) {
      msg.attendees = _attendees;
    }
    return msg;
  },
};

export const CreateEventReq = {
  /**
   * Serializes a CreateEventReq to protobuf.
   */
  encode: function (msg) {
    return CreateEventReq._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a CreateEventReq from protobuf.
   */
  decode: function (bytes) {
    return CreateEventReq._readMessage(
      CreateEventReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a CreateEventReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(CreateEventReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a CreateEventReq from JSON.
   */
  decodeJSON: function (json) {
    return CreateEventReq._readMessageJSON(
      CreateEventReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a CreateEventReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      calendarId: "",
      eventId: "",
      event: CalEvent.initialize(),
      ownerOfEvent: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.calendarId) {
      writer.writeString(1, msg.calendarId);
    }
    if (msg.eventId) {
      writer.writeString(2, msg.eventId);
    }
    if (msg.event) {
      writer.writeMessage(4, msg.event, CalEvent._writeMessage);
    }
    if (msg.ownerOfEvent) {
      writer.writeString(5, msg.ownerOfEvent);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.calendarId) {
      json.calendarId = msg.calendarId;
    }
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    if (msg.event) {
      const event = CalEvent._writeMessageJSON(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    if (msg.ownerOfEvent) {
      json.ownerOfEvent = msg.ownerOfEvent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.calendarId = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readString();
          break;
        }
        case 4: {
          reader.readMessage(msg.event, CalEvent._readMessage);
          break;
        }
        case 5: {
          msg.ownerOfEvent = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _calendarId = json.calendarId;
    if (_calendarId) {
      msg.calendarId = _calendarId;
    }
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    const _event = json.event;
    if (_event) {
      const m = CalEvent.initialize();
      CalEvent._readMessageJSON(m, _event);
      msg.event = m;
    }
    const _ownerOfEvent = json.ownerOfEvent;
    if (_ownerOfEvent) {
      msg.ownerOfEvent = _ownerOfEvent;
    }
    return msg;
  },
};

export const CreateEventRes = {
  /**
   * Serializes a CreateEventRes to protobuf.
   */
  encode: function (msg) {
    return CreateEventRes._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a CreateEventRes from protobuf.
   */
  decode: function (bytes) {
    return CreateEventRes._readMessage(
      CreateEventRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a CreateEventRes to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(CreateEventRes._writeMessageJSON(msg));
  },

  /**
   * Deserializes a CreateEventRes from JSON.
   */
  decodeJSON: function (json) {
    return CreateEventRes._readMessageJSON(
      CreateEventRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a CreateEventRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      calendarId: "",
      eventId: "",
      event: CalEvent.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.calendarId) {
      writer.writeString(1, msg.calendarId);
    }
    if (msg.eventId) {
      writer.writeString(2, msg.eventId);
    }
    if (msg.event) {
      writer.writeMessage(3, msg.event, CalEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.calendarId) {
      json.calendarId = msg.calendarId;
    }
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    if (msg.event) {
      const event = CalEvent._writeMessageJSON(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.calendarId = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.event, CalEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _calendarId = json.calendarId;
    if (_calendarId) {
      msg.calendarId = _calendarId;
    }
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    const _event = json.event;
    if (_event) {
      const m = CalEvent.initialize();
      CalEvent._readMessageJSON(m, _event);
      msg.event = m;
    }
    return msg;
  },
};

export const UpdateEventReq = {
  /**
   * Serializes a UpdateEventReq to protobuf.
   */
  encode: function (msg) {
    return UpdateEventReq._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a UpdateEventReq from protobuf.
   */
  decode: function (bytes) {
    return UpdateEventReq._readMessage(
      UpdateEventReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a UpdateEventReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(UpdateEventReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a UpdateEventReq from JSON.
   */
  decodeJSON: function (json) {
    return UpdateEventReq._readMessageJSON(
      UpdateEventReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a UpdateEventReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      calendarId: "",
      eventId: "",
      event: CalEvent.initialize(),
      ownerOfEvent: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.calendarId) {
      writer.writeString(1, msg.calendarId);
    }
    if (msg.eventId) {
      writer.writeString(2, msg.eventId);
    }
    if (msg.event) {
      writer.writeMessage(4, msg.event, CalEvent._writeMessage);
    }
    if (msg.ownerOfEvent) {
      writer.writeString(5, msg.ownerOfEvent);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.calendarId) {
      json.calendarId = msg.calendarId;
    }
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    if (msg.event) {
      const event = CalEvent._writeMessageJSON(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    if (msg.ownerOfEvent) {
      json.ownerOfEvent = msg.ownerOfEvent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.calendarId = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readString();
          break;
        }
        case 4: {
          reader.readMessage(msg.event, CalEvent._readMessage);
          break;
        }
        case 5: {
          msg.ownerOfEvent = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _calendarId = json.calendarId;
    if (_calendarId) {
      msg.calendarId = _calendarId;
    }
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    const _event = json.event;
    if (_event) {
      const m = CalEvent.initialize();
      CalEvent._readMessageJSON(m, _event);
      msg.event = m;
    }
    const _ownerOfEvent = json.ownerOfEvent;
    if (_ownerOfEvent) {
      msg.ownerOfEvent = _ownerOfEvent;
    }
    return msg;
  },
};

export const UpdateEventRes = {
  /**
   * Serializes a UpdateEventRes to protobuf.
   */
  encode: function (msg) {
    return UpdateEventRes._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a UpdateEventRes from protobuf.
   */
  decode: function (bytes) {
    return UpdateEventRes._readMessage(
      UpdateEventRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a UpdateEventRes to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(UpdateEventRes._writeMessageJSON(msg));
  },

  /**
   * Deserializes a UpdateEventRes from JSON.
   */
  decodeJSON: function (json) {
    return UpdateEventRes._readMessageJSON(
      UpdateEventRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a UpdateEventRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      calendarId: "",
      eventId: "",
      event: CalEvent.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.calendarId) {
      writer.writeString(1, msg.calendarId);
    }
    if (msg.eventId) {
      writer.writeString(2, msg.eventId);
    }
    if (msg.event) {
      writer.writeMessage(3, msg.event, CalEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.calendarId) {
      json.calendarId = msg.calendarId;
    }
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    if (msg.event) {
      const event = CalEvent._writeMessageJSON(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.calendarId = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.event, CalEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _calendarId = json.calendarId;
    if (_calendarId) {
      msg.calendarId = _calendarId;
    }
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    const _event = json.event;
    if (_event) {
      const m = CalEvent.initialize();
      CalEvent._readMessageJSON(m, _event);
      msg.event = m;
    }
    return msg;
  },
};

export const DeleteEventReq = {
  /**
   * Serializes a DeleteEventReq to protobuf.
   */
  encode: function (msg) {
    return DeleteEventReq._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a DeleteEventReq from protobuf.
   */
  decode: function (bytes) {
    return DeleteEventReq._readMessage(
      DeleteEventReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a DeleteEventReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(DeleteEventReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a DeleteEventReq from JSON.
   */
  decodeJSON: function (json) {
    return DeleteEventReq._readMessageJSON(
      DeleteEventReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a DeleteEventReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      calendarId: "",
      eventId: "",
      ownerOfEvent: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.calendarId) {
      writer.writeString(1, msg.calendarId);
    }
    if (msg.eventId) {
      writer.writeString(2, msg.eventId);
    }
    if (msg.ownerOfEvent) {
      writer.writeString(5, msg.ownerOfEvent);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.calendarId) {
      json.calendarId = msg.calendarId;
    }
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    if (msg.ownerOfEvent) {
      json.ownerOfEvent = msg.ownerOfEvent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.calendarId = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readString();
          break;
        }
        case 5: {
          msg.ownerOfEvent = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _calendarId = json.calendarId;
    if (_calendarId) {
      msg.calendarId = _calendarId;
    }
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    const _ownerOfEvent = json.ownerOfEvent;
    if (_ownerOfEvent) {
      msg.ownerOfEvent = _ownerOfEvent;
    }
    return msg;
  },
};

export const DeleteEventRes = {
  /**
   * Serializes a DeleteEventRes to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes a DeleteEventRes from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Serializes a DeleteEventRes to JSON.
   */
  encodeJSON: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes a DeleteEventRes from JSON.
   */
  decodeJSON: function (_json) {
    return {};
  },

  /**
   * Initializes a DeleteEventRes with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },
};

export const GetEventReq = {
  /**
   * Serializes a GetEventReq to protobuf.
   */
  encode: function (msg) {
    return GetEventReq._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a GetEventReq from protobuf.
   */
  decode: function (bytes) {
    return GetEventReq._readMessage(
      GetEventReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetEventReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetEventReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetEventReq from JSON.
   */
  decodeJSON: function (json) {
    return GetEventReq._readMessageJSON(
      GetEventReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetEventReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      eventId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.eventId) {
      writer.writeString(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _eventId = json.eventId;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    return msg;
  },
};

export const GetEventRes = {
  /**
   * Serializes a GetEventRes to protobuf.
   */
  encode: function (msg) {
    return GetEventRes._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a GetEventRes from protobuf.
   */
  decode: function (bytes) {
    return GetEventRes._readMessage(
      GetEventRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetEventRes to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetEventRes._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetEventRes from JSON.
   */
  decodeJSON: function (json) {
    return GetEventRes._readMessageJSON(
      GetEventRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetEventRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      event: CalEvent.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.event) {
      writer.writeMessage(1, msg.event, CalEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.event) {
      const event = CalEvent._writeMessageJSON(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.event, CalEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _event = json.event;
    if (_event) {
      const m = CalEvent.initialize();
      CalEvent._readMessageJSON(m, _event);
      msg.event = m;
    }
    return msg;
  },
};

export const GetUsersGcalEventsReq = {
  /**
   * Serializes a GetUsersGcalEventsReq to protobuf.
   */
  encode: function (msg) {
    return GetUsersGcalEventsReq._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetUsersGcalEventsReq from protobuf.
   */
  decode: function (bytes) {
    return GetUsersGcalEventsReq._readMessage(
      GetUsersGcalEventsReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetUsersGcalEventsReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetUsersGcalEventsReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetUsersGcalEventsReq from JSON.
   */
  decodeJSON: function (json) {
    return GetUsersGcalEventsReq._readMessageJSON(
      GetUsersGcalEventsReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetUsersGcalEventsReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      email: "",
      username: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    const _username = json.username;
    if (_username) {
      msg.username = _username;
    }
    return msg;
  },
};

export const GetUsersGcalEventsRes = {
  /**
   * Serializes a GetUsersGcalEventsRes to protobuf.
   */
  encode: function (msg) {
    return GetUsersGcalEventsRes._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetUsersGcalEventsRes from protobuf.
   */
  decode: function (bytes) {
    return GetUsersGcalEventsRes._readMessage(
      GetUsersGcalEventsRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetUsersGcalEventsRes to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetUsersGcalEventsRes._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetUsersGcalEventsRes from JSON.
   */
  decodeJSON: function (json) {
    return GetUsersGcalEventsRes._readMessageJSON(
      GetUsersGcalEventsRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetUsersGcalEventsRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      eventIntervals: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.eventIntervals?.length) {
      writer.writeRepeatedString(1, msg.eventIntervals);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.eventIntervals?.length) {
      json.eventIntervals = msg.eventIntervals;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventIntervals.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _eventIntervals = json.eventIntervals;
    if (_eventIntervals) {
      msg.eventIntervals = _eventIntervals;
    }
    return msg;
  },
};

export const GetTeamsGcalEventsReq = {
  /**
   * Serializes a GetTeamsGcalEventsReq to protobuf.
   */
  encode: function (msg) {
    return GetTeamsGcalEventsReq._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetTeamsGcalEventsReq from protobuf.
   */
  decode: function (bytes) {
    return GetTeamsGcalEventsReq._readMessage(
      GetTeamsGcalEventsReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetTeamsGcalEventsReq to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetTeamsGcalEventsReq._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetTeamsGcalEventsReq from JSON.
   */
  decodeJSON: function (json) {
    return GetTeamsGcalEventsReq._readMessageJSON(
      GetTeamsGcalEventsReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetTeamsGcalEventsReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      teamID: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.teamID) {
      writer.writeString(1, msg.teamID);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.teamID) {
      json.teamID = msg.teamID;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.teamID = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _teamID = json.teamID;
    if (_teamID) {
      msg.teamID = _teamID;
    }
    return msg;
  },
};

export const GetTeamsGcalEventsRes = {
  /**
   * Serializes a GetTeamsGcalEventsRes to protobuf.
   */
  encode: function (msg) {
    return GetTeamsGcalEventsRes._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetTeamsGcalEventsRes from protobuf.
   */
  decode: function (bytes) {
    return GetTeamsGcalEventsRes._readMessage(
      GetTeamsGcalEventsRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetTeamsGcalEventsRes to JSON.
   */
  encodeJSON: function (msg) {
    return JSON.stringify(GetTeamsGcalEventsRes._writeMessageJSON(msg));
  },

  /**
   * Deserializes a GetTeamsGcalEventsRes from JSON.
   */
  decodeJSON: function (json) {
    return GetTeamsGcalEventsRes._readMessageJSON(
      GetTeamsGcalEventsRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetTeamsGcalEventsRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      eventIntervals: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.eventIntervals?.length) {
      writer.writeRepeatedString(1, msg.eventIntervals);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.eventIntervals?.length) {
      json.eventIntervals = msg.eventIntervals;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventIntervals.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const _eventIntervals = json.eventIntervals;
    if (_eventIntervals) {
      msg.eventIntervals = _eventIntervals;
    }
    return msg;
  },
};
