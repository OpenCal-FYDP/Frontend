syntax = "proto3";

option go_package = "/rpc";

service CalendarEventManagementService {
  // return the created event if successful
  rpc CreateEvent(CreateEventReq) returns (CreateEventRes);

  // return the updated event if successful
  rpc UpdateEvent(UpdateEventReq) returns (UpdateEventRes);
  rpc DeleteEvent(DeleteEventReq) returns (DeleteEventRes);

  // get event
  rpc GetEvent(GetEventReq) returns (GetEventRes);
}

// implemented to googleâ€™s spec https://developers.google.com/calendar/api/guides/create-events
message CalEvent {
  string summary = 1;
  string location = 2;
  int64 Start = 3; //iso timestamp
  int64 end = 4; //iso timestamp
  repeated string recurrence = 5;
  repeated string attendees = 6;
}

message CreateEventReq {
  string calendarId = 1;
  string eventId = 2;
//  string oauthToken = 3;
  CalEvent event = 4;
  string ownerOfEvent = 5; // email used to fetch oauth token from identity service
}

message CreateEventRes {
  string calendarId = 1;
  string eventId = 2;
  CalEvent event = 3;
}

message UpdateEventReq {
  string calendarId = 1;
  string eventId = 2;
//  string oauthToken = 3;
  CalEvent event = 4;
  string ownerOfEvent = 5; // email used to fetch oauth token from identity service
}

message UpdateEventRes {
  string calendarId = 1;
  string eventId = 2;
  CalEvent event = 3;
}

message DeleteEventReq {
  string calendarId = 1;
  string eventId = 2;
//  string oauthToken = 3;
  string ownerOfEvent = 5; // email used to fetch oauth token from identity service
}

message DeleteEventRes {}

message GetEventReq {
  string eventId = 1;
}

message GetEventRes {
  CalEvent event = 1;
}